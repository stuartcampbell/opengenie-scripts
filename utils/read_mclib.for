*************************************************************************
*	S.I.Campbell (ISIS)						*
*	Created : 3rd June 1998						*
*	Revised : 8th June 1998						*
*									*
*	Reads in Monte Carlo Simulations data from the .DAT files that	*
*	are generated by MC_RUN	into OpenGENIE.				*
*									*
*************************************************************************
*									*
** INPUT workspace fields						*
*									*
*	FILE		:   <string>	= input .DAT file		*
*									*
** OUTPUT workspace fields						*
*									*
*	TITLE		:   <string>	 = Title of MC simulation	*
*	FILEID		:   <string>	 = Unique File identification	*
*	DATASETS	:   <integer>	 = No. of data sets in file	*
*	DATATYPE	:   <int array>	 = type of data set 1=1D/2=2D 	*
*	DETNAMES	:   <str array>	 = Description of each dataset 	*
*	TIME1		:   <real array> = 1D time bins			*
*	DATA1		:   <real array> = 1D data			*
*	STDDEV1		:   <real array> = 1D error bars		*
*									*
*************************************************************************

	SUBROUTINE GMODULE_QUERY(pars_get, pars_put)
	IMPLICIT NONE
        INCLUDE 'genie_modules.inc'
	EXTERNAL pars_get, pars_put
	CHARACTER*20 symbol(1),descrip(1),language(1),type(1),extent(1)
	
	IF(MODULE_VERSION_OK(GENIE_MAJOR, GENIE_MINOR) .EQ. 0) RETURN
	symbol(1)  = 'get_mc_dat'
	descrip(1) = 'Reads MCLIB data'
	language(1) = 'FORTRAN'
	type(1) = 'INPUT'
	EXTENT(1) = '*'
	CALL MODULE_PUT_STRING_ARRAY(pars_put, 'symbol', symbol, 1)
	CALL MODULE_PUT_STRING_ARRAY(pars_put, 'descrip', descrip, 1)
	CALL MODULE_PUT_STRING_ARRAY(pars_put, 'language', language, 1)
	CALL MODULE_PUT_STRING_ARRAY(pars_put, 'type', type, 1)
	CALL MODULE_PUT_STRING_ARRAY(pars_put, 'extent', extent, 1)
	RETURN	
	END

*************************************************************************

	SUBROUTINE get_mc_dat(pars_get, pars_put)

	IMPLICIT NONE		
	INCLUDE 'genie_modules.inc'
	EXTERNAL pars_get, pars_put

	INTEGER maxdet, maxtime, maxbins, i, j
	PARAMETER(maxdet=15,maxtime=5000,maxbins=100)

	INTEGER unit, stat, n1d, n2dbins, n2dtime
	INTEGER ndet, datatype(maxdet), dim1(maxtime), dim2(maxbins)
     	INTEGER dims_array1(2), dims_array2(3)
	REAL time1(maxtime,maxdet), data1(maxtime,maxdet), 
     &	stddev1(maxtime,maxdet)
	REAL time2(maxtime,maxdet), data2(maxtime,maxbins,maxdet), 
     &	stddev2(maxtime,maxbins,maxdet)
	CHARACTER title*40, fileid*17, detname(20)*20, string*10
	CHARACTER*80 input_file

	IF(MODULE_VERSION_OK(GENIE_MAJOR, GENIE_MINOR) .EQ. 0) RETURN

	CALL MODULE_GET_STRING(pars_get, 'file', input_file)

	CALL MODULE_INFORMATION('Executing READ_MCLIB ...')
	
	CALL MODULE_INFORMATION('Reading file ... '//input_file)

	unit=34

	OPEN(unit, FILE=input_file, STATUS='OLD', IOSTAT=stat)
	IF(stat.ne.0) THEN
		CALL module_error('READ_MC_RUN_DATA','Unable to open ' 
     &           //input_file,'Check file exists and is readable')
		RETURN
	ENDIF

	CALL MODULE_INFORMATION('Calling "get_mc_data" ')

	call read_mc_run_data(unit,title,fileid,detname,time1,data1,
     &		stddev1,time2,data2,stddev2,ndet,n1d,n2dbins,n2dtime,
     &		datatype)

	close(unit,iostat=stat)

	CALL MODULE_PUT_STRING(pars_put, 'file', input_file)
	CALL MODULE_PUT_STRING(pars_put, 'title', title)
	CALL MODULE_PUT_STRING(pars_put, 'FileID', fileid)
	CALL MODULE_PUT_INT(pars_put, 'DataSets', ndet)
	CALL MODULE_PUT_INT_ARRAY(pars_put, 'DataType', datatype, ndet)
	
	CALL MODULE_PUT_STRING_ARRAY(pars_put,'detnames', detname, ndet)

	dims_array1(1) = maxtime
	dims_array1(2) = maxdet

	dims_array2(1) = n2dtime	
	dims_array2(2) = n2dbins
	dims_array2(3) = ndet
	
	CALL MODULE_PUT_ND_REAL_ARRAY(pars_put,'time1',time1,dims_array1,2)
	CALL MODULE_PUT_ND_REAL_ARRAY(pars_put,'data1',data1,dims_array1,2)
	CALL MODULE_PUT_ND_REAL_ARRAY(pars_put,'stddev1',stddev1,dims_array1,2)

C	CALL MODULE_PUT_ND_REAL_ARRAY(pars_put,'time2',time2,dims_array1,2)
C	CALL MODULE_PUT_ND_REAL_ARRAY(pars_put,'data2',data2,dims_array2,3)
C	CALL MODULE_PUT_ND_REAL_ARRAY(pars_put,'stddev2',stddev2,dims_array2,3)

	
	RETURN
	END

*************************************************************************

	SUBROUTINE read_mc_run_data(unit,titlesafe,fileidsafe,detname,time1,
     &			data1,stddev1,time2,data2,stddev2,ndet,n1d,n2dbins,
     &			n2dtime,datatype)
                                                      
	PARAMETER(maxdet=15,maxtime=5000,maxbins=100)

	INTEGER unit, index, flag, i, n1d, n2dtime, n2dbins
	INTEGER ndet, datatype(maxdet), dim1(maxtime), dim2(maxbins)
	REAL time1(maxtime,maxdet), data1(maxtime,maxdet), 
     &	stddev1(maxtime,maxdet)
	REAL time2(maxtime,maxdet), data2(maxtime,maxbins,maxdet), 
     &	stddev2(maxtime,maxbins,maxdet)
	REAL header(32)
	CHARACTER twochar*2, title*40, fileid*17, detname(20)*20,
     &	line*20, titlesafe*40, fileidsafe*17

	ndet = 0
	flag = 0

	READ(unit,100,END=999) twochar, title, fileid

	CALL MODULE_INFORMATION('TITLE   : '//title)	
	CALL MODULE_INFORMATION('FILE ID :'//fileid)
C	print*,'title   = ',title
C	print*,'fileid  = ',fileid

	titlesafe = title
	fileidsafe = fileid

	rewind(unit)

5	CONTINUE
	
	READ(unit,100,END=999) twochar, title, fileid

	IF(twochar.EQ.'  ') READ(unit,100,END=999) twochar, title, fileid

* For a 1D Detector
      IF(twochar.eq.'t '.OR.twochar.eq.'X '.OR.twochar.eq.'R ') THEN
      
	CALL MODULE_INFORMATION('Found 1D data set...')

	   ndet = ndet + 1
	   READ(unit,*,END=999) header
    	   dim1(ndet) = header(1)
* read detector name
	   READ(unit,'(A20)',END=999) detname(ndet)
	   datatype(ndet) = 1
* find and read time bins
	   IF(flag.eq.0) THEN
9		READ(unit,'(A4)',END=999) line
		IF(line.ne.'BINS') goto 9
		READ(unit,*,END=999) (time1(i,ndet), i=1,int(header(1)))
	   ENDIF
	   flag = 1
* find and read 1D data
10	   READ(unit,'(A4)',END=999) line
	   IF(line.ne.'DATA') goto 10
	   READ(unit,*,END=999) (data1(i,ndet), i=1,int(header(1)))
* find and read error bars
11	   READ(unit,'(A)',END=999) line
	   IF(line.ne.'STDDEV') goto 11
	   READ(unit,*,END=999) (stddev1(i,ndet), i=1,int(header(1)))
	   n1d=int(header(1))
	ENDIF
	

* For a 2D Detector
      IF(twochar.eq.'XT'.OR.twochar.eq.'YT'.OR.twochar.eq.'RT') THEN

      	CALL MODULE_INFORMATION('Found 2D data set...')

	   ndet = ndet + 1
	   READ(unit,*,END=999) header
	   dim1(ndet) = header(17)
	   dim2(ndet) = header(1)
* read detector name
	   READ(unit,'(A20)',END=999) detname(ndet)
	   datatype(ndet) = 2
* find and read time bins
12	   READ(unit,'(A4)',END=999) line
	   IF(line.ne.'BINS') goto 12
13	   READ(unit,'(A4)',END=999) line
	   IF(line.ne.'BINS') goto 13
	   READ(unit,*,END=999) (time2(i,ndet), i=1,int(header(17)))
* find and read data and error bars
14	   READ(unit,110,END=999) line, index
	   IF(line.ne.'T') goto 15
     	  READ(unit,*,END=999)(data2(index,i,ndet),i = 1,int(header(1)))
	   READ(unit,'(A6)',END=999) line
     	   READ(unit,*,END=999) (stddev2(index,i,ndet), 
     &					i = 1, int(header(1)))
     	   n2dtime = int(header(17))
     	   n2dbins = int(header(1))
	   GOTO 14
15	CONTINUE

16 	CONTINUE		
	ENDIF

	GOTO 5

999	CONTINUE

100	FORMAT(A2,3X,A40,1X,A17)
110	FORMAT(A1,3X,I)
	
	RETURN
	END
